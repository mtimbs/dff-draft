"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var path = require('path');

var isString = function isString(str) {
  return typeof str === 'string';
};

function findProjectRoot() {
  var filePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var projectRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (!filePath || !isString(filePath) || !projectRoot || !isString(projectRoot)) {
    return null;
  }

  var normalizedFilePath = path.normalize(filePath);
  var normalizedProjectRoot = path.normalize(projectRoot) // remove leading ["../", "./". "/"] or multiples of (e.g. "../../")
  .replace(/^(\.\.\/)+|^(\.\.\\)+|^(\.\/)+|^(\.\\)+|^(\/)+|^(\\)+/, '') // remove trailing slash(s)
  .replace(/(\/)+$|(\\)+$/, '');

  if (normalizedFilePath.includes(normalizedProjectRoot)) {
    var _normalizedFilePath$s = normalizedFilePath.split(normalizedProjectRoot),
        _normalizedFilePath$s2 = _slicedToArray(_normalizedFilePath$s, 1),
        workspaceRoot = _normalizedFilePath$s2[0];

    return "".concat(workspaceRoot).concat(normalizedProjectRoot);
  }

  return null;
}

module.exports = findProjectRoot;